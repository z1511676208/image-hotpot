{"remainingRequest":"/Users/edy/Desktop/gitlab/image-hotpot/node_modules/babel-loader/lib/index.js!/Users/edy/Desktop/gitlab/image-hotpot/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/edy/Desktop/gitlab/image-hotpot/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/edy/Desktop/gitlab/image-hotpot/src/components/plugin/element/table/el-table-select.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/edy/Desktop/gitlab/image-hotpot/src/components/plugin/element/table/el-table-select.vue","mtime":1628478882845},{"path":"/Users/edy/Desktop/gitlab/image-hotpot/node_modules/cache-loader/dist/cjs.js","mtime":1625024217486},{"path":"/Users/edy/Desktop/gitlab/image-hotpot/node_modules/babel-loader/lib/index.js","mtime":1628478904830},{"path":"/Users/edy/Desktop/gitlab/image-hotpot/node_modules/cache-loader/dist/cjs.js","mtime":1625024217486},{"path":"/Users/edy/Desktop/gitlab/image-hotpot/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1628478909545}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/edy/Desktop/gitlab/image-hotpot/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/Users/edy/Desktop/gitlab/image-hotpot/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'ElTableSelect',\n  props: {\n    /*\n    * 表格\n    * */\n    // 表格展示列\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 表格数据\n    data: {\n      type: Array,\n      required: true\n    },\n    // 是否显示多选列\n    isSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 操作组\n    // 自定义按钮{icon: '图标', btnType: '按钮类型', handler: '执行的方法', buttonName: '按钮名字',condition: {} 显示判别值}\n    operation: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 传入自定义按钮时，需要延展宽度的最大值\n    operationCustomLength: {\n      type: Number,\n      default: 0\n    },\n    // 回显判别值的name\n    judgeValue: {\n      required: true,\n      type: String\n    },\n\n    /*\n    * 分页\n    * */\n    // 是否显示\n    isPagination: {\n      type: Boolean,\n      default: true\n    },\n    total: {\n      type: Number,\n      default: 0\n    },\n    // 当前页面\n    currentPage: {\n      type: Number,\n      default: 1\n    },\n    // 自定义每页面数量组\n    pageSizes: {\n      type: Array,\n      default: function _default() {\n        return [10, 20, 50, 100];\n      }\n    },\n    // 每页面数量\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n    // total 数据总量, sizes 每页面数量组, prev 上一页, pager, next 下一页, jumper 页面跳转\n    layout: {\n      type: String,\n      default: 'prev, pager, next, jumper'\n    }\n  },\n  data: function data() {\n    return {\n      getRowKeys: function getRowKeys(row) {\n        return row.index;\n      },\n      cacheCurrentPage: 1,\n      cacheSelectData: []\n    };\n  },\n  computed: {\n    // 操作按钮的宽度自适应\n    fixedWidth: function fixedWidth() {\n      return this.operationCustomLength ? this.operationCustomLength * 110 - 5 : this.operation.length * 110 - 5;\n    }\n  },\n  mounted: function mounted() {\n    this.cacheCurrentPage = this.currentPage;\n  },\n  methods: {\n    /*\n    * 表格\n    * */\n    // 筛选行的操作\n    operationGroup: function operationGroup(affix) {\n      if (affix === 'custom') {\n        // 自定义列表\n        this.customList = this.operation.filter(function (n) {\n          return _typeof(n) === 'object';\n        });\n        return this.customList;\n      } else {\n        // 固定\n        return this.operation.indexOf(affix) >= 0;\n      }\n    },\n    // 自定义事件触发\n    handleCustom: function handleCustom(index, row, handler) {\n      this.$emit(handler, index, row);\n    },\n    // 编辑事件\n    handleEdit: function handleEdit(index, row) {\n      this.$emit('handleEdit', index, row);\n    },\n    // 插入事件\n    handleInsert: function handleInsert(index, row) {\n      this.$emit('handleInsert', index, row);\n    },\n    // 删除事件\n    handleDelete: function handleDelete(index, row) {\n      var _this = this;\n\n      this.$confirm('确认删除?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _this.$emit('handleDelete', index, row);\n      });\n    },\n    // 查看事件\n    handleCheck: function handleCheck(index, row) {\n      this.$emit('handleCheck', index, row);\n    },\n    // 选中改变事件\n    handleSelectionChange: function handleSelectionChange(val) {\n      this.$emit('handleSelectionChange', val);\n    },\n    // 单个选中事件\n    handleSelect: function handleSelect(list) {\n      this.cacheSelectData[this.cacheCurrentPage] = list;\n      this.$emit('handleSelect', list);\n    },\n    // 全选事件\n    handleSelectAll: function handleSelectAll(list) {\n      // 防止指针错乱\n      this.cacheSelectData[this.cacheCurrentPage] = list.length ? list : null;\n      this.$emit('handleSelect', list);\n    },\n    // 单行选中\n    setSelection: function setSelection(row, bool) {\n      this.$refs.tableGroup.toggleRowSelection(row, bool);\n    },\n    // 清空选中\n    clearSelection: function clearSelection() {\n      this.$refs.tableGroup.clearSelection();\n    },\n    // 分页选择回显\n    echoSelection: function echoSelection(currentPageSelectList) {\n      var _this2 = this;\n\n      if (currentPageSelectList) {\n        var _list = this.data.filter(function (row) {\n          return currentPageSelectList.some(function (item) {\n            return item[_this2.judgeValue] === row[_this2.judgeValue];\n          });\n        });\n\n        _list.forEach(function (row) {\n          _this2.setSelection(row); // or\n          // this.$refs.tableGroup.toggleRowSelection(row)\n\n        });\n      }\n    },\n\n    /*\n    * 分页\n    * */\n    handleSizeChange: function handleSizeChange(num) {\n      this.$emit('handleSizeChange', num);\n    },\n    handleCurrentChange: function handleCurrentChange(page) {\n      var _this3 = this;\n\n      this.$emit('handleCurrentChange', page);\n      this.cacheCurrentPage = page; // 等待表格数据回显\n\n      setTimeout(function () {\n        _this3.echoSelection(_this3.cacheSelectData[page]);\n      }, 500);\n    },\n\n    /*\n    * 按钮\n    * */\n    // 确定\n    handleConfirm: function handleConfirm() {\n      var _ref;\n\n      // 所有选中的数据\n      var _AllSelectData = (_ref = []).concat.apply(_ref, _toConsumableArray(this.cacheSelectData)).filter(function (item) {\n        return item !== null && _typeof(item) === 'object';\n      });\n\n      this.$emit('handleConfirm', _AllSelectData);\n      this.cacheSelectData = [];\n      this.clearSelection();\n    },\n    // 取消\n    handleCancel: function handleCancel() {\n      this.cacheSelectData = [];\n      this.$emit('handleCancel');\n      this.clearSelection();\n    }\n  }\n};",{"version":3,"sources":["el-table-select.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n@Description: 封装element table select组件\n@Last-edit-date: 2019.11.16\n@Easy o.o <<<<<<<\n<ElTableSelect\n  :columns=\"tableColumns\"\n  :data=\"tableData\"\n  :operation=\"['check']\"\n  :is-selection=\"true\"\n  :page-size=\"5\"\n  :total=\"total\"\n  :judgeValue=\"'index'\"\n  @handleCurrentChange=\"handleCurrentChange\"\n  @handleConfirm=\"handleConfirm\"\n  @handleCancel=\"handleCancel\"\n/>\n-->\n<template>\n  <section class=\"el-table-container\">\n    <el-table\n      ref=\"tableGroup\"\n      :data=\"data\"\n      :highlight-current-row=\"true\"\n      :row-key=\"getRowKeys\"\n      border\n      stripe\n      size=\"small\"\n      style=\"width: 100%\"\n      @selection-change=\"handleSelectionChange\"\n      @select=\"handleSelect\"\n      @select-all=\"handleSelectAll\"\n    >\n      <!--多选列-->\n      <el-table-column\n        v-if=\"isSelection\"\n        type=\"selection\"\n        align=\"center\"\n        width=\"55\"\n      />\n\n      <!-- 展示列 -->\n      <template v-for=\"(column, index) in columns\">\n        <slot\n          v-if=\"column.slotName\"\n          :name=\"column.slotName\"\n        />\n        <component\n          :is=\"column.component\"\n          v-if=\"column.component\"\n          :key=\"index\"\n          :params=\"column.params\"\n        />\n        <el-table-column\n          v-if=\"column.prop\"\n          :key=\"index\"\n          :label=\"column.label\"\n          :prop=\"column.prop\"\n          :width=\"column.width\"\n          :class-name=\"column.className\"\n          align=\"center\"\n        />\n      </template>\n\n      <!-- 操作列 -->\n      <el-table-column\n        :width=\"fixedWidth\"\n        label=\"操作\"\n        fixed=\"right\"\n        align=\"center\"\n      >\n        <template slot-scope=\"scope\">\n          <el-button v-if=\"operationGroup('edit')\" icon=\"el-icon-edit\" type=\"success\" size=\"mini\" @click=\"handleEdit(scope.$index, scope.row)\">\n            编辑\n          </el-button>\n          <el-button v-if=\"operationGroup('insert')\" icon=\"el-icon-plus\" size=\"mini\" @click=\"handleInsert(scope.$index, scope.row)\">\n            增加\n          </el-button>\n          <el-button v-if=\"operationGroup('delete')\" icon=\"el-icon-close\" type=\"danger\" size=\"mini\" @click=\"handleDelete(scope.$index, scope.row)\">\n            删除\n          </el-button>\n          <el-button v-if=\"operationGroup('check')\" icon=\"el-icon-info\" type=\"info\" size=\"mini\" @click=\"handleCheck(scope.$index, scope.row)\">\n            查看\n          </el-button>\n          <!-- 自定义按钮 -->\n          <span\n            v-if=\"operationGroup('custom')\"\n            style=\"display:inline-block;\"\n          >\n            <!--eslint-disable-->\n            <el-button\n              v-for=\"(i,index) in customList\"\n              v-if=\"!i.condition || i.condition.value.indexOf(scope.row[i.condition.key]) >= 0\"\n              :key=\"index\"\n              :icon=\"i.icon\"\n              :type=\"i.btnType\"\n              size=\"mini\"\n              @click=\"handleCustom(scope.$index, scope.row, i.handler)\"\n            >\n              {{ i.buttonName }}\n            </el-button>\n          </span>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <el-pagination\n      v-if=\"isPagination\"\n      background\n      :current-page=\"currentPage\"\n      :page-sizes=\"pageSizes\"\n      :page-size=\"pageSize\"\n      :layout=\"layout\"\n      :total=\"total\"\n      class=\"el-pagination-c\"\n      @size-change=\"handleSizeChange\"\n      @current-change=\"handleCurrentChange\"\n    />\n\n    <el-row class=\"el-row-select\">\n      <el-col :offset=\"18\" :span=\"3\" class=\"el-col-select\">\n        <el-button type=\"primary\" size=\"small\" @click=\"handleConfirm\">确定</el-button>\n      </el-col>\n      <el-col :span=\"3\" class=\"el-col-select\">\n        <el-button size=\"small\" @click=\"handleCancel\">取消</el-button>\n      </el-col>\n    </el-row>\n  </section>\n</template>\n\n<script>\nexport default {\n  name: 'ElTableSelect',\n  props: {\n    /*\n    * 表格\n    * */\n    // 表格展示列\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 表格数据\n    data: {\n      type: Array,\n      required: true\n    },\n    // 是否显示多选列\n    isSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 操作组\n    // 自定义按钮{icon: '图标', btnType: '按钮类型', handler: '执行的方法', buttonName: '按钮名字',condition: {} 显示判别值}\n    operation: {\n      type: Array,\n      default: () => []\n    },\n    // 传入自定义按钮时，需要延展宽度的最大值\n    operationCustomLength: {\n      type: Number,\n      default: 0\n    },\n    // 回显判别值的name\n    judgeValue: {\n      required: true,\n      type: String\n    },\n\n    /*\n    * 分页\n    * */\n    // 是否显示\n    isPagination: {\n      type: Boolean,\n      default: true\n    },\n    total: {\n      type: Number,\n      default: 0\n    },\n    // 当前页面\n    currentPage: {\n      type: Number,\n      default: 1\n    },\n    // 自定义每页面数量组\n    pageSizes: {\n      type: Array,\n      default: () => [10, 20, 50, 100]\n    },\n    // 每页面数量\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n    // total 数据总量, sizes 每页面数量组, prev 上一页, pager, next 下一页, jumper 页面跳转\n    layout: {\n      type: String,\n      default: 'prev, pager, next, jumper'\n    }\n  },\n  data() {\n    return {\n      getRowKeys(row) {\n        return row.index\n      },\n      cacheCurrentPage: 1,\n      cacheSelectData: []\n    }\n  },\n  computed: {\n    // 操作按钮的宽度自适应\n    fixedWidth() {\n      return this.operationCustomLength ? this.operationCustomLength * 110 - 5 : this.operation.length * 110 - 5\n    }\n  },\n  mounted() {\n    this.cacheCurrentPage = this.currentPage\n  },\n  methods: {\n    /*\n    * 表格\n    * */\n    // 筛选行的操作\n    operationGroup(affix) {\n      if (affix === 'custom') {\n        // 自定义列表\n        this.customList = this.operation.filter(n => {\n          return typeof n === 'object'\n        })\n        return this.customList\n      } else {\n        // 固定\n        return this.operation.indexOf(affix) >= 0\n      }\n    },\n    // 自定义事件触发\n    handleCustom(index, row, handler) {\n      this.$emit(handler, index, row)\n    },\n    // 编辑事件\n    handleEdit(index, row) {\n      this.$emit('handleEdit', index, row)\n    },\n    // 插入事件\n    handleInsert(index, row) {\n      this.$emit('handleInsert', index, row)\n    },\n    // 删除事件\n    handleDelete(index, row) {\n      this.$confirm('确认删除?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.$emit('handleDelete', index, row)\n      })\n    },\n    // 查看事件\n    handleCheck(index, row) {\n      this.$emit('handleCheck', index, row)\n    },\n    // 选中改变事件\n    handleSelectionChange(val) {\n      this.$emit('handleSelectionChange', val)\n    },\n    // 单个选中事件\n    handleSelect(list) {\n      this.cacheSelectData[this.cacheCurrentPage] = list\n      this.$emit('handleSelect', list)\n    },\n    // 全选事件\n    handleSelectAll(list) {\n      // 防止指针错乱\n      this.cacheSelectData[this.cacheCurrentPage] = list.length ? list : null\n      this.$emit('handleSelect', list)\n    },\n    // 单行选中\n    setSelection(row, bool) {\n      this.$refs.tableGroup.toggleRowSelection(row, bool)\n    },\n    // 清空选中\n    clearSelection() {\n      this.$refs.tableGroup.clearSelection()\n    },\n    // 分页选择回显\n    echoSelection(currentPageSelectList) {\n      if (currentPageSelectList) {\n        const _list = this.data.filter(row => {\n          return currentPageSelectList.some(item => {\n            return item[this.judgeValue] === row[this.judgeValue]\n          })\n        })\n        _list.forEach(row => {\n          this.setSelection(row)\n          // or\n          // this.$refs.tableGroup.toggleRowSelection(row)\n        })\n      }\n    },\n\n    /*\n    * 分页\n    * */\n    handleSizeChange(num) {\n      this.$emit('handleSizeChange', num)\n    },\n    handleCurrentChange(page) {\n      this.$emit('handleCurrentChange', page)\n      this.cacheCurrentPage = page\n      // 等待表格数据回显\n      setTimeout(() => {\n        this.echoSelection(this.cacheSelectData[page])\n      }, 500)\n    },\n\n    /*\n    * 按钮\n    * */\n    // 确定\n    handleConfirm() {\n      // 所有选中的数据\n      const _AllSelectData = [].concat(...this.cacheSelectData).filter((item) => {\n        return item !== null && typeof item === 'object'\n      })\n      this.$emit('handleConfirm', _AllSelectData)\n      this.cacheSelectData = []\n      this.clearSelection()\n    },\n    // 取消\n    handleCancel() {\n      this.cacheSelectData = []\n      this.$emit('handleCancel')\n      this.clearSelection()\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\" ref=\"stylesheet/scss\">\n  .el-table-container{\n    .el-pagination-c{\n      float: right;\n      margin-top: 1.5em;\n    }\n    .el-row-select{\n      margin-top: 6em;\n      .el-col-select{\n        text-align: center;\n      }\n    }\n  }\n</style>\n"],"sourceRoot":"src/components/plugin/element/table"}]}